image: microsoft/dotnet:2.1-sdk

variables:
  IMAGE_NAME: blog-api
  Solution: blog.sln
stages:
    - test
    - build
    - deploy

job_build:
    stage: test
    before_script:
        - echo building...
        - dotnet --info
        - dotnet restore $Solution
    script:
        - dotnet build $Solution

unit_test:
     stage: test
     before_script:
        - dotnet restore $Solution
     script: 
        - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutputDirectory=../../coverage
     artifacts:
        when: on_success
        name: "code-coverage-${CI_PROJECT_PATH_SLUG}_${CI_COMMIT_REF_NAME}_pipeline${CI_PIPELINE_ID}_job${CI_JOB_ID}"
        expire_in: 1 mos and 2 weeks
        paths:
          - coverage/


    
publish_package:
    stage: test
    before_script:
        - dotnet --info
        - dotnet build $Solution
        - cd src/Blog.Api
    script:
        - dotnet publish -c Release  -o ../../publish
    artifacts:
        name: "${CI_PROJECT_PATH_SLUG}_${CI_COMMIT_REF_NAME}_pipeline${CI_PIPELINE_ID}_job${CI_JOB_ID}"
        when: on_success
        expire_in: 1 mos and 2 weeks
        paths: 
          - publish/



job_build_image:
  stage: build
  image: docker:git
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    IMAGE_TAG: dev-$CI_PIPELINE_ID
  before_script:
    - docker --version
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker build --build-arg GIT_COMMIT=$CI_COMMIT_SHA -t ${CI_REGISTRY_IMAGE}/$IMAGE_NAME:${IMAGE_TAG}  .
    - docker push ${CI_REGISTRY_IMAGE}/$IMAGE_NAME:${IMAGE_TAG}
  
 
deploy_gdev:
    stage: deploy
    variables:
        IMAGE_TAG: dev-$CI_PIPELINE_ID
        DOMAIN: 47.101.152.254:8080
    before_script:
        - docker-compose stop
        - docker-compose rm
    script:
         - docker-compose up -d --build
    after_script:
         - docker-compose logs
    environment:
        name: gdev
        url: http://${DOMAIN}/swagger/
    when: on_success
    tags:
        - runner02
    only:
        - master   

.deploy_gdev:
  stage: deploy
  variables:
    IMAGE_TAG: dev-$CI_PIPELINE_ID
    DOMAIN: 47.101.152.254:8080
  before_script:
     - whoami
     - docker pull ${CI_REGISTRY_IMAGE}/$IMAGE_NAME:${IMAGE_TAG}
  script:  
     - if [ $(docker ps -a -q -f name=blog) ]; then  docker stop $(docker ps -a -q -f name=blog);fi
     - if [ $(docker ps -a -q -f name=blog) ]; then  docker rm $(docker ps -a -q -f name=blog);fi
     - docker run --name blog   -d -p 8080:80  ${CI_REGISTRY_IMAGE}/$IMAGE_NAME:${IMAGE_TAG}  
     # -v /var/blog/blogapi:/app
  after_script:
     #- docker images | grep "^none" | awk "{print $3}"
     - docker image prune -f -a
  environment:
    name: gdev
    url: http://${DOMAIN}/swagger/
  when: on_success
  tags:
    - runner01
  only:
    - master
