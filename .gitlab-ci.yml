image: mcr.microsoft.com/dotnet/core/sdk:3.1

variables:
  IMAGE_TAG: ${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}
  Solution: ./src/Blog.Api/Blog.Api.csproj
  TestSolution: ./test/Blog.Test/Blog.Test.csproj

stages:
    - test
    - build
    - deploy

job_build:
    stage: test
    before_script:
        - echo building...
        - dotnet --info
        - dotnet restore $Solution
    script:
        - dotnet build $Solution

unit_test:
     stage: test
     before_script:
        - dotnet restore $TestSolution
        - dotnet build $TestSolution
        - find /root -iname ReportGenerator.dll 
     script: 
        - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:Exclude=[xunit.*]*
        - cd ./test/Blog.Test
        - dotnet /root/.nuget/packages/reportgenerator/4.5.0/tools/netcoreapp3.0/ReportGenerator.dll -reports:coverage.opencover.xml -targetdir:../../coverage 
     artifacts:
        when: on_success
        name: "code-coverage-${CI_PROJECT_PATH_SLUG}_${CI_COMMIT_REF_NAME}_pipeline${CI_PIPELINE_ID}_job${CI_JOB_ID}"
        expire_in: 1 mos and 2 weeks
        paths:
          - coverage/
  
publish_package:
    stage: test
    before_script:
        - dotnet --info
        - dotnet build $Solution
    script:
        - cd ./src/Blog.Api
        - dotnet publish -c Release  -o ../../publish
    artifacts:
        name: "${CI_PROJECT_PATH_SLUG}_${CI_COMMIT_REF_NAME}_pipeline${CI_PIPELINE_ID}_job${CI_JOB_ID}"
        when: on_success
        expire_in: 1 mos and 2 weeks
        paths: 
          - publish/
    only:
        - master   

job_build_image:
  stage: build
  image: docker:git
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker --version
    - docker login -u ${REGISTRY_USER} -p ${REGISTRY_PASSWORD} ${REGISTRY_URL}
  script:
      - docker build --build-arg GIT_COMMIT=$CI_COMMIT_SHA -t ${CI_REGISTRY_IMAGE}:${IMAGE_TAG} .
      - docker images
      - docker push ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
  only:
      - master 
      - /^feature-.*$/
  allow_failure: false

# ========== deploy stage jobs ============
.deploy_job_template: &job_deploy_definition
    stage: deploy
    variables:
        DOMAIN: 47.101.152.254:8081
    before_script:
        - echo Version=${CI_COMMIT_SHA:0:8} > web-variables.env
        - echo MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} > db-variables.env
    script:
         - docker-compose ps
         - docker-compose down
         - docker-compose up -d
         - docker-compose logs
    after_script:
         - docker image prune -f -a
    environment:
        name: prod
        url: http://${DOMAIN}/swagger/
    when: on_success
    dependencies: []
    allow_failure: false
    tags:
        - runner02

deploy_prd:
    <<: *job_deploy_definition
    when: manual
    only:
     - master

